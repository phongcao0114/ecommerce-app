# =============================
# Docker Compose for EcommerceApp
# =============================
#
# This configuration orchestrates the following services:
#   - backend: Spring Boot REST API
#   - frontend: Angular SPA
#   - db: Microsoft SQL Server 2022 (with SSL and persistent storage)
#
# Usage:
#   docker-compose up --build
#
# Initialization Process:
#   - SQL Server (db) starts and exposes port 1433.
#   - The init-db service runs a two-step initialization:
#       1. Runs create-db.sql against the master database to create 'ecommerce_app' if it does not exist.
#       2. Waits for 'ecommerce_app' to be available.
#       3. Runs init-db.sql against 'ecommerce_app' to create tables and insert initial data (admin user, category, products).
#   - The backend service depends on both db and init-db, ensuring it only starts after the database and all initial data are ready.
#   - The frontend depends on the backend.
#
# Service Details:
#   backend:
#     - Built from ./backend (Dockerfile required)
#     - Exposes port 8080
#     - Persists uploaded files to ./backend/uploads
#     - Depends on db
#   frontend:
#     - Built from ./frontend/ecommerce-frontend (Dockerfile required)
#     - Exposes port 4200
#     - Depends on backend
#   db:
#     - Runs Microsoft SQL Server 2022
#     - Exposes port 1433 (default SQL Server port)
#     - SSL enabled (certs in sqlserver-ssl volume)
#     - Persists all database data in sqlserver-data volume
#     - Environment variables configure admin password, agent, HADR, and SSL
#
# Volumes:
#   sqlserver-ssl: Stores SQL Server SSL certificates
#   sqlserver-data: Stores SQL Server database data (persistent)
#
# Notes:
#   - Ensure Dockerfiles exist for both backend and frontend.
#   - The backend's datasource URL should use 'db' as the host (not localhost).
#   - The SQL Server 'ecommerce' database must exist or be created on startup.
#   - To persist data, do not remove named volumes when bringing down the stack.
#   - To re-initialize the database (and rerun the init scripts), use 'docker compose down -v' to remove all data.
#
version: '3.8'

services:
  # Backend Spring Boot API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
    volumes:
      - ./backend/uploads:/app/uploads
    depends_on:
      - db
      - init-db

  #  # Frontend Angular app
  #  frontend:
  #    build:
  #      context: ./ecommerce-frontend
  #      dockerfile: Dockerfile
  #    ports:
  #      - "4200:80"
  #    depends_on:
  #      - backend
  #    restart: unless-stopped
  #    container_name: ecommerce_frontend

  # Frontend2 Angular app (from ./frontend)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "4200:80"
    depends_on:
      - backend
    restart: unless-stopped
    container_name: ecommerce_frontend

  # Microsoft SQL Server database
  db:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: sqlssl_db
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=YourStrong!Passw0rd
      - MSSQL_ENABLE_HADR=1
      - MSSQL_AGENT_ENABLED=true
      - MSSQL_SSL_CERT=/certs/sql.crt
      - MSSQL_SSL_KEY=/certs/sql.key
    ports:
      - "1433:1433"
    volumes:
      - sqlserver-ssl:/certs
      - sqlserver-data:/var/opt/mssql
      - ./backend/db-init/create-db.sql:/docker-entrypoint-initdb.d/create-db.sql:ro

  # Database initialization service
  init-db:
    image: mcr.microsoft.com/mssql-tools
    depends_on:
      - db
    entrypoint: [ ]
    command: >
      sh -c '
        echo "[INIT-DB] Waiting for SQL Server to be available...";
        for i in $$(seq 1 30); do
          /opt/mssql-tools/bin/sqlcmd -S db -U sa -P YourStrong!Passw0rd -Q "SELECT 1" && break
          echo "[INIT-DB] SQL Server not ready, waiting... ($$i)";
          sleep 2;
        done;
        echo "[INIT-DB] Creating database...";
        /opt/mssql-tools/bin/sqlcmd -S db -U sa -P YourStrong!Passw0rd -d master -i /init/create-db.sql;
        echo "[INIT-DB] Waiting for ecommerce_app to be available...";
        for i in $$(seq 1 30); do
          /opt/mssql-tools/bin/sqlcmd -S db -U sa -P YourStrong!Passw0rd -d ecommerce_app -Q "SELECT 1" && break
          echo "[INIT-DB] ecommerce_app not ready, waiting... ($$i)";
          sleep 2;
        done;
        echo "[INIT-DB] Running init-db.sql...";
        /opt/mssql-tools/bin/sqlcmd -S db -U sa -P YourStrong!Passw0rd -d ecommerce_app -i /init/init-db.sql;
        echo "[INIT-DB] Done.";
      '
    volumes:
      - ./backend/db-init/create-db.sql:/init/create-db.sql:ro
      - ./backend/db-init/init-db.sql:/init/init-db.sql:ro
    restart: "no"

# Volumes for persistent data
volumes:
  sqlserver-ssl:
  sqlserver-data:
